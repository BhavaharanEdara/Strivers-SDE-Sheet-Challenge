/************************************************************
  
   Following is the TreeNode class structure
   
   class TreeNode<T> { 
        T data; 
        TreeNode<T> left;
        TreeNode<T> right;
  
        TreeNode(T data) { 
            this.data = data; 
            left = null; 
            right = null; 
        }
   }
    
 ************************************************************/

public class Solution {
      static TreeNode<Integer> binaryTree(int[] inorder, int[] postorder, int is, int ie, int ps, int pe){
        if(is>ie || ps>pe){
            return null;
        }
        if(is==ie || ps==pe){
            return new TreeNode<Integer>(inorder[is]);
        }
        
        int ind = -1;
        for(int i=is;i<=ie;i++){
            if(postorder[pe]==inorder[i]){
                ind = i;
                break;
            }
        }

        TreeNode<Integer> root = new TreeNode<Integer>(inorder[ind]);
        int l = ind - is;
        int r = ie- ind;
        TreeNode<Integer> left = binaryTree(inorder, postorder, is, ind-1, ps,pe-r-1 );
        TreeNode<Integer> right = binaryTree(inorder, postorder, ind+1, ie, pe-r, pe-1 );
        root.left = left;
        root.right = right;
        return root;

    }

	public static TreeNode<Integer> getTreeFromPostorderAndInorder(int[] postOrder, int[] inOrder) {
		// Write your code here.
    return binaryTree(inOrder, postOrder, 0, inOrder.length-1, 0, postOrder.length-1);
	}
}
