import java.util.* ;
import java.io.*; 
public class Solution 
{
    static void dfs(int i, int[] vis, ArrayList<ArrayList<Integer>> graph, Stack<Integer> st){
        if(vis[i]==1){
            return;
        }
        vis[i] = 1;
        for(int a : graph.get(i)){
            if(vis[a]==0){
                dfs(a, vis, graph, st);
                st.add(a);
            }
        }
        return;
    }

    public static ArrayList<Integer> topologicalSort(ArrayList<ArrayList<Integer>> edges, int v, int e) 
    {
        // Write your code here
        ArrayList<ArrayList<Integer>> graph = new ArrayList<>();
        for(int i=0;i<v;i++){
            graph.add(new ArrayList<>());
        }
        for(int i=0;i<edges.size();i++){
            graph.get(edges.get(i).get(0)).add(edges.get(i).get(1));
        }
        Stack<Integer> st = new Stack<>();
        int[] vis = new int[v];
        for(int i=0;i<v;i++){
            if(vis[i]==0){
                dfs(i, vis, graph, st);

                st.add(i);
            }
        }
        ArrayList<Integer> ans = new ArrayList<>();
        while(st.size()!=0){
            ans.add(st.pop());

        }
        return ans;
    }
}
