class Pair{
    int r;
    int c;
    Pair(int a, int b){
        r = a;
        c = b;
    }

}

public class Solution 
{
    static void dfs(int[][] mat, int[][] vis, int i, int j, int n, int m){
        if(i<0 || j<0 || i>=n || j>=m){
            return; 
        }
        if(vis[i][j]==1){return;}
        if(mat[i][j]==0){return;}
        vis[i][j] = 1;
        dfs(mat, vis, i+1, j , n , m);
        dfs(mat, vis, i-1, j , n , m);
        dfs(mat, vis, i, j+1 , n , m);
        dfs(mat, vis, i, j-1 , n , m);
        dfs(mat, vis, i-1, j-1 , n , m);
        dfs(mat, vis, i+1, j-1 , n , m);
        dfs(mat, vis, i+1, j+1 , n , m);
        dfs(mat, vis, i-1, j+1 , n , m);

    }
    public static int getTotalIslands(int[][] mat) 
	{
        //Your code goes here
        int n = mat.length;
        int m = mat[0].length;
        int[][] visited = new int[n][m];
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(mat[i][j]==0){
                    visited[i][j] = -1;
                }
            }
        }

        //Stack<Pair> st = new Stack<>();
        int ans = 0;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(visited[i][j]==0){
                    dfs(mat, visited, i, j, n, m);
                    ans += 1;
                }
            }
        }
        return ans;

    }
}
