import java.util.* ;
import java.io.*; 
public class Solution {
    public static int[] maxMinWindow(int[] a, int n) {
        // Write your code here
        int[] left = new int[n];
        int[] right = new int[n];
        Stack<Integer> st = new Stack<>();
        for(int i=0;i<n;i++){
            while(st.size()!=0 && a[st.peek()]>=a[i]){
                st.pop();
            }
            if(st.size()==0){
                left[i] = -1;
            }
            else{
                left[i] = st.peek();
            }
            st.add(i);
        }
        st = new Stack<>();
        for(int i=n-1;i>=0;i--){
            while(st.size()!=0 && a[st.peek()]>=a[i]){
                st.pop();
            }
            if(st.size()==0){
                right[i] = n;
            }
            else{
                right[i] = st.peek();
            }
            st.add(i);
        }

        int[] ans = new int[n+n];
        Arrays.fill(ans, Integer.MIN_VALUE);

        for(int i=0;i<n;i++){
            ans[Math.abs(left[i]-right[i])-2] = Math.max(a[i],ans[Math.abs(left[i]-right[i])-2]);
        }
        for(int i=n-1;i>=0;i--){
                ans[i] = Math.max(ans[i], ans[i+1]);
        }
        return ans;
    }
}

