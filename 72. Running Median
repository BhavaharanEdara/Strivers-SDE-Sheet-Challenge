
import java.util.Comparator;
import java.util.PriorityQueue;

public class Solution {

	public static void findMedian(int arr[])  {
        
        
        /* Your class should be named Solution
		 * Don't write main().
		 * Don't read input, it is passed as function argument.
		 * Return output and don't print it.
	 	 * Taking input and printing output is handled automatically.
        */
		PriorityQueue<Integer>maxHeap= new PriorityQueue<>();
		PriorityQueue<Integer>minHeap= new PriorityQueue<>((a,b)->b-a);

		for(int i=0;i<arr.length;i++){
			if(minHeap.size()==0){
				minHeap.add(arr[i]);
				System.out.print(arr[i]+" ");
			}
			
			else{
				if(arr[i]<=minHeap.peek()){
					minHeap.add(arr[i]);
				}
				else{
					maxHeap.add(arr[i]);
				}
				if(i%2==0){
					while(minHeap.size()-maxHeap.size()!=1){
						if(minHeap.size()<maxHeap.size()){
							int a = maxHeap.peek();
							maxHeap.remove();
							minHeap.add(a);
						}
						else{
							int a = minHeap.peek();
							minHeap.remove();
							maxHeap.add(a);
						}
					}
					System.out.print(minHeap.peek()+" ");

				}
				else{
					while(minHeap.size()!=maxHeap.size()){
						if(minHeap.size()<maxHeap.size()){
							int a = maxHeap.peek();
							maxHeap.remove();
							minHeap.add(a);
						}
						else{
							int a = minHeap.peek();
							minHeap.remove();
							maxHeap.add(a);
						}
						
					}
					int b = (minHeap.peek()+maxHeap.peek())/2;
					System.out.print(b+" ");	

				}
			}
		}

		return;

    
    }


}
