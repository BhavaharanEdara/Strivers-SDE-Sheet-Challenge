import java.util.ArrayList;

public class Solution {
    
    static boolean isSafe(int[][] arr, int c, int r){

        
        for(int i=0;i<arr.length;i++){
            if(arr[r][i]==1){
                return false;
            }
            if(arr[i][c]==1){return false;}
        }
        
        
        for(int i=0;(r+i<arr.length && c+i<arr.length);i++){
            
            if(arr[r+i][c+i]==1){
                return false;
            }
        }
        for(int i=0;(r-i>=0 && c+i<arr.length);i++){
            
            if(arr[r-i][c+i]==1){
                return false;
            }
        }
        for(int i=0;(r+i<arr.length && c-i>=0);i++){
            
            if(arr[r+i][c-i]==1){
                return false;
            }
        }
        for(int i=0;(r-i>=0 && c-i>=0);i++){
            
            if(arr[r-i][c-i]==1){
                return false;
            }
        }
        
        return true;
    }
    static void addtoarlist(int[][] arr, ArrayList<ArrayList<Integer>> ans){

        ArrayList<Integer> temp = new ArrayList<>();
        for(int i=0; i<arr.length; i++){
            for(int j=0; j<arr.length; j++)
                temp.add(arr[i][j]);
        }
        ans.add(temp);
    }
    
    static void nqueen(int[][] arr, int i, int n, ArrayList<ArrayList<Integer>> ans){
        if(i==n){
            addtoarlist(arr, ans);
            return;
        }
        for(int a=0;a<n;a++){
            if(isSafe(arr, a, i)){
                arr[i][a] = 1;
                nqueen(arr, i+1, n, ans);
                arr[i][a] = 0;
            }
        }
        return;
    }
    public static ArrayList<ArrayList<Integer>> solveNQueens(int n) {
        // Write your code here.
        ArrayList<ArrayList<Integer>> ans = new ArrayList<>();
        int[][] arr = new int[n][n];
        nqueen(arr, 0, n, ans);

        return ans;
    }
}
