import java.util.* ;
import java.io.*; 
public class Solution {

    static int min(int[][] mat, int i, int j){
        
        if(i==mat.length-1 && j==mat[0].length-1){
            return mat[i][j];
        }

        if(i==mat.length-1){
            return mat[i][j]+min(mat, i, j+1);
        }
        if(j==mat[0].length-1){
            return mat[i][j]+min(mat, i+1, j);
        }
        int a = mat[i][j]+min(mat, i, j+1);
        int b = mat[i][j]+min(mat, i+1, j);
        return Math.min(a, b);
    }
    public static int minSumPath(int[][] grid) {
        int n = grid.length;
        int m = grid[0].length;
    	// Write your code here.
        int[][] dp = new int[n][m];
        dp[n-1][m-1] = grid[n-1][m-1];
        for(int i=n-2;i>=0;i--){
            dp[i][m-1] = dp[i+1][m-1]+grid[i][m-1];
        }
        for(int i=m-2;i>=0;i--){
            dp[n-1][i] = dp[n-1][i+1]+grid[n-1][i];
        }
        for(int i=n-2;i>=0;i--){
            for(int j=m-2;j>=0;j--){
                dp[i][j] = grid[i][j] + Math.min(dp[i][j+1], dp[i+1][j]);

            }
        }
        return dp[0][0];
    }
}
